name: Publish Test Report to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  generate_and_publish:
    runs-on: ubuntu-latest
    # Grant the workflow permission to write the HTML and XML into the repository
    # and deploy them to GitHub Pages.
    permissions:
      contents: write
      pages: write

    steps:
      # Step 1: Check out the repository contents so we can add files.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Create a sample JUnit‑style XML file with 10 test cases.
      # According to the JUnit format, the <testsuite> element summarises results
      # using attributes like tests, failures and skipped【589015782831994†L169-L176】.
      # We include 5 passed tests (no failure/skipped tags), 3 failed tests and
      # 2 skipped tests to demonstrate parsing.
      - name: Generate sample XML test report
        run: |
          cat <<'XML' > test-results.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <testsuites name="SampleSuite" tests="10" failures="3" errors="0">
            <testsuite name="SampleTestSuite" tests="10" failures="3" errors="0" skipped="2" timestamp="2025-10-08T00:00:00">
              <!-- Passed test cases -->
              <testcase name="TestCase01" classname="SampleTests" time="0.1" />
              <testcase name="TestCase02" classname="SampleTests" time="0.2" />
              <testcase name="TestCase03" classname="SampleTests" time="0.15" />
              <testcase name="TestCase04" classname="SampleTests" time="0.12" />
              <testcase name="TestCase05" classname="SampleTests" time="0.1" />

              <!-- Failed test cases include a <failure> tag -->
              <testcase name="TestCase06" classname="SampleTests" time="0.2">
                <failure type="failure" message="Assertion failed"/>
              </testcase>
              <testcase name="TestCase07" classname="SampleTests" time="0.25">
                <failure type="failure" message="Timeout"/>
              </testcase>
              <testcase name="TestCase08" classname="SampleTests" time="0.18">
                <failure type="failure" message="Null pointer exception"/>
              </testcase>

              <!-- Skipped test cases include a <skipped> tag -->
              <testcase name="TestCase09" classname="SampleTests" time="0.05">
                <skipped type="skipped" message="Feature not implemented"/>
              </testcase>
              <testcase name="TestCase10" classname="SampleTests" time="0.07">
                <skipped type="skipped" message="Test disabled"/>
              </testcase>
            </testsuite>
          </testsuites>
          XML

      # Step 3: Generate a generic HTML dashboard.  We embed Chart.js via a CDN
      # and parse the XML using the DOMParser.  For each testcase we look for
      # <failure>, <error> or <skipped> elements to categorise the result; if
      # none are present we treat it as passed.  The bar chart configuration
      # follows the Chart.js example where a new Chart is created by passing
      # a canvas context and specifying the 'bar' type【967033570237699†L63-L90】.
      - name: Generate HTML dashboard from XML
        run: |
          cat <<'HTML' > index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>GitHub Actions Test Report</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              h1 { text-align: center; }
              .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 24px; max-width: 1000px; margin: 0 auto; }
              canvas { max-width: 600px; margin: 0 auto; display: block; }
              table { width:100%; border-collapse: collapse; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align:left; }
              th { background:#f6f6f6; }
            </style>
          </head>
          <body>
            <h1>Test Results Dashboard</h1>
            <div class="grid">
              <canvas id="resultsChart"></canvas>
              <div>
                <h3>Summary</h3>
                <table>
                  <tbody id="summaryRows"></tbody>
                </table>
              </div>
            </div>

            <script>
              async function loadAndVisualize() {
                // Fetch the XML report generated by the workflow
                const res = await fetch('test-results.xml');
                const xml = await res.text();
                const doc = new DOMParser().parseFromString(xml, 'application/xml');

                // Extract all testcase elements
                const testcases = Array.from(doc.getElementsByTagName('testcase'));
                let passed = 0, failed = 0, errors = 0, skipped = 0;
                testcases.forEach(tc => {
                  if (tc.getElementsByTagName('failure').length > 0) {
                    failed++;
                  } else if (tc.getElementsByTagName('error').length > 0) {
                    errors++;
                  } else if (tc.getElementsByTagName('skipped').length > 0) {
                    skipped++;
                  } else {
                    passed++;
                  }
                });
                const total = testcases.length;

                // Populate the summary table
                const rows = [
                  ['Total', total],
                  ['Passed', passed],
                  ['Failed', failed],
                  ['Errors', errors],
                  ['Skipped', skipped],
                ];
                document.getElementById('summaryRows').innerHTML =
                  rows.map(([k, v]) => `<tr><th>${k}</th><td>${v}</td></tr>`).join('');

                // Draw the bar chart using Chart.js
                const ctx = document.getElementById('resultsChart');
                new Chart(ctx, {
                  type: 'bar',
                  data: {
                    labels: ['Passed', 'Failed', 'Errors', 'Skipped'],
                    datasets: [{
                      label: 'Test Results',
                      data: [passed, failed, errors, skipped]
                    }]
                  },
                  options: {
                    responsive: true,
                    scales: {
                      y: {
                        beginAtZero: true,
                        ticks: { precision: 0 }
                      }
                    },
                    plugins: {
                      legend: { display: false },
                      title: { display: true, text: 'Results from test‑results.xml' }
                    }
                  }
                });
              }
              loadAndVisualize();
            </script>
          </body>
          </html>
          HTML

      # Step 4: Deploy the generated report to GitHub Pages.  The action below
      # checks out the current branch, commits the HTML and XML files into a
      # gh-pages branch, and publishes the content to GitHub Pages.  Users can
      # then visit the Pages site to see the bar chart summarising the test
      # results.  Note: the 'pages' permission must be enabled at the job level.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
